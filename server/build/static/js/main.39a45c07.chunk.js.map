{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducers.js","redux/configureStore.js","styles.js","components/Form/styles.js","components/Form/Form.js","components/List/styles.js","components/List/List.js","App.js","reportWebVitals.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","axios","defaults","baseURL","fetchContacts","dispatch","a","console","log","get","data","addContact","name","message","contact","post","then","catch","error","getAllContacts","state","contacts","items","createReducer","payload","loading","combineReducers","reducers","contactsReducer","persistConfig","key","storage","persistedReducer","persistReducer","store","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","configureStore","reducer","devTools","process","middleware","thunk","makeStyles","appBar","borderRadius","margin","display","flexDirection","justifyContent","alignItems","heading","color","theme","root","spacing","paper","padding","form","flexWrap","buttonSubmit","marginBottom","input","textArea","Form","useDispatch","useState","setName","setMessage","useEffect","ContactOperations","classes","useStyles","handleChange","e","target","value","resetInput","Paper","className","autoComplete","noValidate","id","onSubmit","preventDefault","Typography","variant","TextField","type","onChange","label","fullWidth","multiline","Button","size","mainContainer","smMargin","actionDiv","textAlign","List","allContacts","useSelector","Grid","container","map","item","xs","sm","md","App","Container","maxWidth","AppBar","position","align","Grow","in","justify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39a45c07.chunk.js","sourcesContent":["// import * as api from '../../api/index'\r\n\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\n\r\n\r\nexport const fetchContactRequest = createAction(\r\n    \"contacts/fetchcontactsRequest\"\r\n);\r\nexport const fetchContactSuccess = createAction(\r\n    \"contacts/fetchcontactsSuccess\"\r\n);\r\n\r\n\r\nexport const fetchContactError = createAction(\"contacts/fetchContactsError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n","import axios from \"axios\";\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions';\r\n\r\n\r\naxios.defaults.baseURL = \"/contacts\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n    console.log(1)\r\n    dispatch(fetchContactRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get(\"/\");\r\n\r\n        dispatch(fetchContactSuccess(data));\r\n    } catch (error) {\r\n        dispatch(fetchContactError(error));\r\n    }\r\n};\r\n\r\nexport const addContact = (name, message) => (dispatch) => {\r\n    console.log(2)\r\n    const contact = {\r\n        name,\r\n        message,\r\n    };\r\n    dispatch(addContactRequest);\r\n\r\n    axios\r\n        .post(\"/\", contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n    fetchContacts,\r\n    addContact\r\n\r\n};","\r\nexport const getAllContacts = (state) => state.contacts.items;\r\n\r\nexport const getLoader = (state) => state.contacts.loading;\r\n\r\n\r\n\r\n\r\n\r\nconst contactSelectors = {\r\n    getAllContacts,\r\n\r\n    getLoader,\r\n\r\n\r\n};\r\nexport default contactSelectors;","import { combineReducers } from \"redux\";\r\n\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n} from './contacts-actions'\r\n\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactSuccess]: (state, { payload }) => payload,\r\n    [addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n\r\n});\r\n\r\n\r\nconst loading = createReducer(false, {\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    loading,\r\n    error,\r\n});\r\n\r\n\r\n","// import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { createStore, applyMiddleware } from 'redux'\r\n\r\n// import {\r\n//     persistStore,\r\n//     persistReducer,\r\n//     FLUSH,\r\n//     REHYDRATE,\r\n//     PAUSE,\r\n//     PERSIST,\r\n//     PURGE,\r\n//     REGISTER,\r\n// } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n// import { contactsReducer } from './contacts';\r\n\r\n// import logger from 'redux-logger';\r\n\r\n\r\n\r\n\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist';\r\nimport thunk from 'redux-thunk';\r\nimport {\r\n    persistStore,\r\n\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\n\r\nimport { contactsReducer } from './contacts';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    contacts: contactsReducer,\r\n});\r\n\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n};\r\n\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nexport const store = configureStore({\r\n    reducer: persistedReducer,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n    middleware: [thunk],\r\n});\r\n\r\n\r\n\r\n","import { makeStyles } from '@material-ui/core/styles'\r\n\r\n\r\nexport default makeStyles(() => ({\r\n    appBar: {\r\n        borderRadius: 15,\r\n        margin: '30px 0',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    heading: {\r\n        color: 'rgba(0,183,255, 1)',\r\n    },\r\n\r\n}));","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'center',\r\n    },\r\n\r\n    buttonSubmit: {\r\n        marginBottom: 10,\r\n    },\r\n\r\n    input: {\r\n        marginBottom: 10,\r\n\r\n    },\r\n\r\n    textArea: {\r\n        marginBottom: 10,\r\n\r\n    }\r\n}));","import { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { getAllContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport * as ContactOperations from \"../../redux/contacts/contacts-operations\";\r\n\r\n\r\n\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport useStyles from './styles';\r\n\r\n\r\nfunction Form() {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        dispatch(ContactOperations.fetchContacts());\r\n        console.log(3)\r\n\r\n    })\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        switch (name) {\r\n            case \"name\":\r\n                setName(value);\r\n                break;\r\n\r\n            case \"message\":\r\n                setMessage(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // operation for get\r\n        dispatch(ContactOperations.addContact(name, message));\r\n        resetInput();\r\n    };\r\n\r\n    const resetInput = () => {\r\n        setName(\"\");\r\n        setMessage(\"\");\r\n    };\r\n\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <form autoComplete=\"off\" noValidate className={`${classes.root} ${classes.form}`} id=\"contact\" onSubmit={handleSubmit}>\r\n                <Typography variant=\"h6\" >Add your message</Typography>\r\n                <TextField\r\n\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    label=\"Name\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                />\r\n\r\n\r\n\r\n                <TextField\r\n\r\n\r\n                    type=\"text\"\r\n                    name=\"message\"\r\n                    value={message}\r\n                    onChange={handleChange}\r\n\r\n                    label=\"Message\"\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    fullWidth\r\n                // rowsMax={4}\r\n\r\n                />\r\n\r\n\r\n\r\n                <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit</Button>\r\n\r\n            </form>\r\n        </Paper>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Form;","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    mainContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    actionDiv: {\r\n        textAlign: 'center',\r\n    },\r\n}));","import React from 'react';\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport * as ContactOperations from \"../../redux/contacts/contacts-operations\";\r\nimport { getAllContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport useStyles from './styles'\r\n\r\n\r\n\r\nfunction List() {\r\n\r\n\r\n    const allContacts = useSelector(getAllContacts);\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        < Grid className={classes.container} container alignItems=\"stretch\" spacing={3}>\r\n            {allContacts.map(({ id, name, message }) => (\r\n\r\n                <Grid key={id} item xs={12} sm={6} md={6}>\r\n                    <p>\r\n                        <b>{name} </b>\r\n\r\n                        <em>{message}</em>\r\n                    </p>\r\n\r\n\r\n\r\n                </Grid>\r\n            ))\r\n            }\r\n        </Grid >\r\n    );\r\n}\r\n\r\n\r\nexport default List","import { useState, useEffect } from 'react';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { Container, AppBar, Typography, Grow, Grid } from '@material-ui/core'\n\nimport useStyles from './styles'\nimport Form from './components/Form/Form';\nimport List from './components/List/List';\n\nimport { store, persistor } from './redux/configureStore';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n\nfunction App() {\n  const classes = useStyles();\n\n\n\n\n  return (\n\n    // <PersistGate loading={null} persistor={persistor}>\n    <Container maxWidth=\"lg\">\n      <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n        <Typography className={classes.heading} variant=\"h2\" align=\"center\">Welcome to our Guest Book</Typography>\n\n      </AppBar>\n      <Grow in>\n        <Container>\n          <Grid container justify=\"space-between\" alignItems=\"stretch\" spacing={3}>\n            <Grid item xs={12} sm={4}>\n              <Form />\n            </Grid>\n            <Grid item xs={12} sm={7}>\n              <List\n\n\n              />\n            </Grid>\n          </Grid>\n        </Container>\n      </Grow>\n    </Container>\n    // </PersistGate>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store } from './redux/configureStore';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { persistStore } from 'redux-persist';\r\n\r\nlet persistor = persistStore(store);\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n        {/* <PersistGate loading={null} persistor={persistor}> */}\r\n        <App />\r\n        {/* </PersistGate> */}\r\n    </Provider>\r\n    ,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}